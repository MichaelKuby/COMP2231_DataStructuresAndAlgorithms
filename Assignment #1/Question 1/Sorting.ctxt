#BlueJ class context
comment0.target=Sorting
comment0.text=\n\ Sorting\ demonstrates\ sorting\ and\ searching\ on\ an\ array\ \n\ of\ objects.\n\n\ @author\ Java\ Foundations\n\ @version\ 4.0\ \n
comment1.params=data
comment1.target=void\ shellSort(java.lang.Comparable[])
comment1.text=\n\ Sorts\ the\ specified\ array\ of\ integers\ using\ the\ Shell\n\ sort\ algorithm.\n\ \n\ @param\ data\ the\ array\ to\ be\ sorted\n
comment10.params=data\ min\ max
comment10.target=void\ mergeSort(java.lang.Comparable[],\ int,\ int)
comment10.text=\n\ Recursively\ sorts\ a\ range\ of\ objects\ in\ the\ specified\ array\ using\ the\n\ merge\ sort\ algorithm.\n\n\ @param\ data\ the\ array\ to\ be\ sorted\n\ @param\ min\ \ the\ index\ of\ the\ first\ element\ \n\ @param\ max\ \ the\ index\ of\ the\ last\ element\n
comment11.params=data\ first\ mid\ last
comment11.target=void\ merge(java.lang.Comparable[],\ int,\ int,\ int)
comment11.text=\n\ Merges\ two\ sorted\ subarrays\ of\ the\ specified\ array.\n\n\ @param\ data\ the\ array\ to\ be\ sorted\n\ @param\ first\ the\ beginning\ index\ of\ the\ first\ subarray\ \n\ @param\ mid\ the\ ending\ index\ fo\ the\ first\ subarray\n\ @param\ last\ the\ ending\ index\ of\ the\ second\ subarray\n
comment2.params=data
comment2.target=void\ selectionSort(java.lang.Comparable[])
comment2.text=\n\ Sorts\ the\ specified\ array\ of\ integers\ using\ the\ selection\n\ sort\ algorithm.\n\n\ @param\ data\ the\ array\ to\ be\ sorted\n
comment3.params=data\ index1\ index2
comment3.target=void\ swap(java.lang.Comparable[],\ int,\ int)
comment3.text=\n\ Swaps\ to\ elements\ in\ an\ array.\ Used\ by\ various\ sorting\ algorithms.\n\ \n\ @param\ data\ \ \ the\ array\ in\ which\ the\ elements\ are\ swapped\n\ @param\ index1\ the\ index\ of\ the\ first\ element\ to\ be\ swapped\n\ @param\ index2\ the\ index\ of\ the\ second\ element\ to\ be\ swapped\n
comment4.params=data
comment4.target=void\ insertionSort(java.lang.Comparable[])
comment4.text=\n\ Sorts\ the\ specified\ array\ of\ objects\ using\ an\ insertion\n\ sort\ algorithm.\n\n\ @param\ data\ the\ array\ to\ be\ sorted\n
comment5.params=data
comment5.target=void\ bubbleSort(java.lang.Comparable[])
comment5.text=\n\ Sorts\ the\ specified\ array\ of\ objects\ using\ a\ bubble\ sort\n\ algorithm.\n\n\ @param\ data\ the\ array\ to\ be\ sorted\n
comment6.params=data
comment6.target=void\ quickSort(java.lang.Comparable[])
comment6.text=\n\ Sorts\ the\ specified\ array\ of\ objects\ using\ the\ quick\ sort\ algorithm.\n\ \n\ @param\ data\ the\ array\ to\ be\ sorted\n
comment7.params=data\ min\ max
comment7.target=void\ quickSort(java.lang.Comparable[],\ int,\ int)
comment7.text=\n\ Recursively\ sorts\ a\ range\ of\ objects\ in\ the\ specified\ array\ using\ the\n\ quick\ sort\ algorithm.\ \n\ \n\ @param\ data\ the\ array\ to\ be\ sorted\n\ @param\ min\ \ the\ minimum\ index\ in\ the\ range\ to\ be\ sorted\n\ @param\ max\ \ the\ maximum\ index\ in\ the\ range\ to\ be\ sorted\n
comment8.params=data\ min\ max
comment8.target=int\ partition(java.lang.Comparable[],\ int,\ int)
comment8.text=\n\ Used\ by\ the\ quick\ sort\ algorithm\ to\ find\ the\ partition.\n\ \n\ @param\ data\ the\ array\ to\ be\ sorted\n\ @param\ min\ \ the\ minimum\ index\ in\ the\ range\ to\ be\ sorted\n\ @param\ max\ \ the\ maximum\ index\ in\ the\ range\ to\ be\ sorted\n
comment9.params=data
comment9.target=void\ mergeSort(java.lang.Comparable[])
comment9.text=\n\ Sorts\ the\ specified\ array\ of\ objects\ using\ the\ merge\ sort\n\ algorithm.\n\n\ @param\ data\ the\ array\ to\ be\ sorted\n
numComments=12
